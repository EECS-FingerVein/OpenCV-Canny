#include "opencv2/imgproc.hpp"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/highgui.hpp"
#include <iostream>
using namespace cv;
using std::cin;
using std::cout;
using std::endl;


Mat src, src_gray;
Mat dst, detected_edges;
int lowThreshold = 5;
const int max_lowThreshold = 30;
const int ratio = 3;
const int kernel_size = 3;
const char* window_name = "Edge Map";
static void CannyThreshold(int, void*)
{
	blur( src_gray, detected_edges, Size(3,3) );
	Canny( detected_edges, detected_edges, lowThreshold, lowThreshold*ratio, kernel_size );
	dst = Scalar::all(0);
	src.copyTo( dst, detected_edges);
	imshow( window_name, dst );
}
int main( int argc, char** argv )
{
  CommandLineParser parser( argc, argv, "{@input | fruits.jpg | input image}" );
  src = imread("03.jpg" ); // Load an image
  if( src.empty() )
  {
	std::cout << "Could not open or find the image!\n" << std::endl;
	std::cout << "Usage: " << argv[0] << " <Input image>" << std::endl;
	return -1;
  }
  dst.create( src.size(), src.type() );
  cvtColor( src, src_gray, COLOR_BGR2GRAY );
  namedWindow( window_name, WINDOW_AUTOSIZE );
  createTrackbar( "Min Threshold:", window_name, &lowThreshold, max_lowThreshold, CannyThreshold );
  CannyThreshold(0, 0);
 
  Mat new_image = Mat::zeros( dst.size(), dst.type() );
	double alpha = 2.0; /*< Simple contrast control */
	int beta = 50;   	/*< Simple brightness control */
	
    	for( int y = 0; y < dst.rows; y++ ) {
    	for( int x = 0; x < dst.cols; x++ ) {
        	for( int c = 0; c < dst.channels(); c++ ) {
            	new_image.at<Vec3b>(y,x)[c] =
              	saturate_cast<uchar>( alpha*dst.at<Vec3b>(y,x)[c] + beta );
        	}
    	}
	}
	imshow("New Image", new_image);
 
  waitKey(0);
  return 0;
 
 
}
